Server:
//package chatClient;

import java.util.*;
import java.net.*;
import java.io.*;

public  class Server {
	//static List<String[]> clientsPresent = new ArrayList<String[]>();			// stores the files kept with clients 
	//static List<String> clientsPresent = new ArrayList<String>();	
	static List<Client> clientsPresent = new ArrayList<Client>();
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		// Port number taken from command line and converted to integer
				//int port = Integer.parseInt(args[0]);
				int port = 4321;
				int cases = 0;
				String messageClient = "";
				Socket client = null;
				int clientID = 1;
				try {
					// Start listening for connection on the specified port
					ServerSocket server = new ServerSocket(port);
					System.out.println("Starting server.");
					//while (true) {
						//System.out.println("hi");
						// The following is a blocking call
						client = server.accept();
						//System.out.println("yo");
						// Send message to the connected client
						// to print on console
						// client.getOutputStream outputs to clients console
						PrintWriter pw = new PrintWriter(client.getOutputStream(), true);
						pw.println("Hello from server.");
						pw.println("Please choose from the following options:");
						pw.println("1. Register Client");
						pw.flush();
						//pw.close();
						// Read message from the client
						/*InputStreamReader isr = new InputStreamReader(client.getInputStream());
						BufferedReader br = new BufferedReader(isr);
						
						// The following is a blocking call
						String message = br.readLine();
						System.out.println(message);*/
						//cases = (int)message;
						 //Sending a reply to client
		                /*String reply = "Done.";
		                OutputStream out = client.getOutputStream();
		                OutputStreamWriter ow = new OutputStreamWriter(out);
		                BufferedWriter bwriter = new BufferedWriter(ow);
		                bwriter.write(reply);
		                System.out.println("Message sent to the client is "+ reply);
		                bwriter.flush();*/
						//reading message from client
						//client = server.accept();
		                //System.out.println("hi");
						while (true){
		                InputStream in = client.getInputStream();
		                InputStreamReader ir = new InputStreamReader(in);
		                BufferedReader breader = new BufferedReader(ir);
		                //System.out.println("hiiiiiiii");
		                messageClient = breader.readLine();
		                System.out.println("Message received from client is "+ messageClient);
		                //PrintWriter output = new PrintWriter(new OutputStreamWriter(System.out));
		                //output.println(messageClient);
		                //output.flush();
						//output.println("whatever");
		             // cases to handle different requests
						if (messageClient != "") {
							cases = Integer.parseInt(messageClient);
						} else {cases = 0;}
						//System.out.println(cases);
						switch(cases) {
						case 1: 
							System.out.println("in case 1");
							InetAddress address = client.getInetAddress();
							//String client_name = address.getHostName();
							String client_name = Integer.toString(clientID);
							addClient(client_name);
							pw.println(client_name);
							pw.flush();
							clientID++;
							System.out.println("out of case 1");
							break;
						case 2:
							System.out.println("In case " + cases);
							String filename = breader.readLine();
							pw.println(filename);
							String data = breader.readLine();
							pw.println(data);
							String IDClient = breader.readLine();
							pw.flush();
							addFiles(filename,data,IDClient);
							System.out.println("out of case 2");
							break;
						default:
							//System.out.println(cases);
							System.out.println("Invalid input");
							break;
						}
						System.out.println("hiiiiiiiiiiiiiiiii");
					}
				} catch (Exception e) {
					// Exception printed on console in case of error
					e.printStackTrace();
				}		
				
				
	}
	public static void addClient(String clientName) {
		//clientsPresent.add(new String[] {clientName});
		Client newClient = new Client();
		newClient.files.add(clientName);
		clientsPresent.add(newClient);
		//clientsPresent.add(clientName);
		List<String> temp = clientsPresent.get(0).files;
		System.out.println("Exiting addClient "+ temp.get(0));
	}
	
	public static void addFiles(String filename, String data, String id) {
		for (int i = 0; i < clientsPresent.size(); i++) {
			//List<String> client = clientsPresent.get(0).files;
			System.out.println(clientsPresent.get(i).files.get(0));
			if (clientsPresent.get(i).files.get(0).equals(id)) {
				clientsPresent.get(i).files.add(filename);
				System.out.println(clientsPresent.get(i).files.get(1));	
			}
		}
	}
}





Client:
//package chatClient;

import java.util.*;
import java.net.*;
import java.io.*;

public class Client {
	List<String> files = new ArrayList<String>();
	static int clientID;
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		// Takes command line arguments
				//int port = Integer.parseInt(args[1]);
				//String ip = args[0];
				int port = 4321;
				String ip = "localhost";
				Socket sock = null;
				int cases = 0;
				try {
					// Connect to the given IP and Port and store in the sock variable
					sock = new Socket(ip, port);
					System.out.println("Connected to server.");
					/* Next, it creates a PrintWriter object to send data over 
					 * the socket connection to the server program. 
					 * It also creates a BufferedReader object to read the text 
					 * sent by the server back to the client.*/
					// Taking input from socket
					//InputStreamReader isr = new InputStreamReader(sock.getInputStream());
					//BufferedReader br = new BufferedReader(isr);
					//PrintWriter output = new PrintWriter(new OutputStreamWriter(System.out));
					//output.println("whatever");
					// The following is a blocking call
					System.out.println("hiiiiiiiiii");
					//String input;
					//while ((input = br.readLine()) != null) {
						//System.out.println(input);
					//}
					
					// receive message from server
					InputStream in = sock.getInputStream();
					InputStreamReader ir = new InputStreamReader(in);
					BufferedReader breader = new BufferedReader(ir);
					String messageReceived = breader.readLine();
					System.out.println(messageReceived);
					String messageReceived1 = breader.readLine();
					System.out.println(messageReceived1);
					String messageReceived2 = breader.readLine();
					System.out.println(messageReceived2);
					System.out.println("##############");
					//while ((messageReceived = breader.readLine()) != null) {
						//System.out.println("Message received from server "+messageReceived);
						//System.out.println(messageReceived);
					//}
					System.out.println("end while loop/n");
					while(true) {
					BufferedReader clientInput = new BufferedReader(new InputStreamReader(System.in));
					String messageToServer = clientInput.readLine();
					// send message to server
					
					PrintWriter pw = new PrintWriter(sock.getOutputStream(), true);
					//pw.println(messageToServer);
					//pw.println("Please choose from the following options:");
					//pw.println("1. Register Client");
					//pw.flush();
					
					/*OutputStream os = sock.getOutputStream();
					OutputStreamWriter o = new OutputStreamWriter(os);
					BufferedWriter bwriter = new BufferedWriter(o);
					//String messageToServer = "1";
					bwriter.write(messageToServer);
					bwriter.flush();
					System.out.println("Message sent to server " + messageToServer);*/
					
					if (messageToServer!= "") {
						cases = Integer.parseInt(messageToServer);
					} else {cases = 0;}
					System.out.println(cases);
					switch (cases) {
					case 1:
						System.out.println('#');
						pw.println(messageToServer);
						pw.flush();
						clientID = Integer.parseInt(breader.readLine());
						System.out.println(clientID);
						break;
					case 2:
						System.out.println("In case 2");
						
						System.out.println("Please enter file name: ");
						String fileName = clientInput.readLine();
						System.out.println("Please enter data: ");
						String data = clientInput.readLine();
						File newFile = new File(fileName);
						int num = 2;
						//pw.println(num);
						pw.println(messageToServer);
						pw.println(fileName);
						pw.println(data);
						pw.println(Integer.toString(clientID));
						pw.flush();
						break;
					default:
						break;
					}
					System.out.println("out");
					}
					//while(true) {
						
					//}
				} catch (Exception e) {
					// Exception printed on console in case of error
					e.printStackTrace();
				}
	}
	
	String[] ips;				// stores IP addresses
	
	public String lookup(String filename) {
		String[][] array  = new String[5][6];			// array is the clientsPresent array in server class
		for (int i = 0; i < array[0].length; i++) {
			for (int j = 0; j < array[1].length; j++) {
				if (array[i][j] == filename) {
					return ips[i];
				}
			}
		}
		return null;
	}
	
	public long get(String filename, long IPaddress, Socket sock) throws IOException{
		String[][] array  = new String[5][6];			// array is the clientsPresent array in server class
		String receiveFile = "C:/output.txt";		// initialize to path
		boolean found = false;;
		String ip = "111";				// don't initialize
		for (int i = 0; i < array[0].length; i++) {
			for (int j = 0; j < array[1].length; j++) {
				if (array[i][j] == filename) {
					// copy into local repo
					//return 1;
					found = true; ip = findIP(i);
					receiveFile = array[i][j];
					break;
				}
				if (found) break;
			}
		}
		int port = 4562;
		if (found == true) {
			int sizeOfFile = 5420000;			///assumed; should larger than required
			FileOutputStream f = null;
			BufferedOutputStream b = null;
			try {
				sock = new Socket(ip, port);
				System.out.println("Connecting to server...");
				
				InputStream in = sock.getInputStream();
				f = new FileOutputStream(receiveFile);
				b = new BufferedOutputStream(f);
				byte[] byteArray = new byte[sizeOfFile];
				int readBytes = in.read(byteArray,0,byteArray.length);
				int curr = readBytes;		// number of bytes read
				do {
					readBytes = in.read(byteArray, curr, (byteArray.length-curr));
					if (readBytes>=0) {
						curr = curr+readBytes;
					}
				} while(readBytes>-1);
				b.write(byteArray, 0, curr);
				b.flush();
				System.out.println("File "+receiveFile+"downloaded ("+curr+" bytes read)");
			} finally {
				//if (sock != null) sock.close(); 
				if (b != null)  b.close();
				if (f != null) f.close();
			}
		}
		if (found == false) return -1;
		return -1;
	}
	
	public int put(String filename, String data, Socket sock) throws IOException {
		try {
			File newFile = new File(filename);
			// send message to server
			OutputStream os = sock.getOutputStream();
			OutputStreamWriter o = new OutputStreamWriter(os);
			BufferedWriter bwriter = new BufferedWriter(o);
			String messageToServer = "1";
			bwriter.write(messageToServer);
			bwriter.flush();
			System.out.println("Message sent to server " + messageToServer);
			// receive message from server
			InputStream in = sock.getInputStream();
			InputStreamReader ir = new InputStreamReader(in);
			BufferedReader breader = new BufferedReader(ir);
			String messageReceived = breader.readLine();
			System.out.println("Message received from server "+messageReceived);
		} catch (Exception e) {
			// Exception printed on console in case of error
			e.printStackTrace();
		}
		return 1;
	}
	
	
	public  String findIP(int ip) {
		return ips[ip];
	}
}
